{"version":3,"sources":["logo.svg","ship.js","game.js","player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ShipFactory","length","squares","Array","fill","isSunk","sunk","getLength","hit","i","GameBoardFactory","grid","push","j","ships","addShip","coordinates","direction","x","y","ship","receiveAttack","attackCoordinates","target","forEach","placement","remainingShips","count","getState","PlayerFactory","name","type","score","names","toLowerCase","split","chars","toUpperCase","join","getName","addPoint","getScore","isBot","Game","props","state","playerIsNext","playerPlacedShips","players","prompt","player","gameboard","fleet","placeRandomShip","console","log","this","alert","setState","window","location","reload","getRandomInt","max","Math","floor","random","e","preventDefault","data","JSON","parse","dataTransfer","getData","id","className","document","getElementById","style","display","enemyGrid","EnemySquare","value","onClick","handleClick","playerGrid","PlayerSquare","onDrop","handleDrop","stringify","React","Component","onDragOver","Ship","shipIsHorizontal","setData","draggable","onDragStart","handleDrag","App","src","logo","alt","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5aad8864.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const ShipFactory = length => {\n    let squares = new Array(length).fill(false)\n\n    const getLength = () => length\n\n    const isSunk = () => {\n        let sunk = true\n        for (let square of squares) {\n            if (!square) {\n                sunk = false\n                break\n            }\n        }\n        return sunk\n    }\n\n    const hit = (i) => {\n        squares[i] = true\n    }\n\n    return {isSunk, getLength, hit}\n}\n\nexport default ShipFactory\n","import ShipFactory from './ship'\n\nconst GameBoardFactory = () => {\n    let grid = []\n    for (let i = 0; i < 10; i++) {\n        grid.push([])\n        for (let j = 0; j < 10; j++) {\n            grid[i].push(' ')\n        }\n    }\n    let ships = []\n\n    const addShip = (length, coordinates, direction) => {\n        if ((direction === 'right' && coordinates.x + length > 10) || (direction === 'left' && coordinates.x - length < -1) || (direction === 'up' && coordinates.y - length < -1) || (direction === 'down' && coordinates.y + length > 10)) return 'invalid'\n\n        for (let i = 0; i < length; i++) {\n            switch (direction) {\n                case 'right':\n                    for (let i = 0; i < length; i++) {\n                        if (typeof(grid[coordinates.x + i][coordinates.y]) === 'object') return 'occupied'\n                    }\n                    break\n                case 'left':\n                    for (let i = 0; i < length; i++) {\n                        if (typeof(grid[coordinates.x - i][coordinates.y]) === 'object') return 'occupied'\n                    }\n                    break\n                case 'up':\n                    for (let i = 0; i < length; i++) {\n                        if (typeof(grid[coordinates.x][coordinates.y - i]) === 'object') return 'occupied'\n                    }\n                    break\n                case 'down':\n                    for (let i = 0; i < length; i++) {\n                        if (typeof(grid[coordinates.x][coordinates.y + i]) === 'object') return 'occupied'\n                    }\n                    break\n                default:\n                    break\n            }\n        }\n\n        let ship = ShipFactory(length)\n        ships.push({coordinates, ship, direction})\n        switch (direction) {\n            case 'right':\n                for (let i = 0; i < length; i++) {\n                    grid[coordinates.x + i][coordinates.y] = ship\n                }\n                break\n            case 'left':\n                for (let i = 0; i < length; i++) {\n                    grid[coordinates.x - i][coordinates.y] = ship\n                }\n                break\n            case 'up':\n                for (let i = 0; i < length; i++) {\n                    grid[coordinates.x][coordinates.y - i] = ship\n                }\n                break\n            case 'down':\n                for (let i = 0; i < length; i++) {\n                    grid[coordinates.x][coordinates.y + i] = ship\n                }\n                break\n            default:\n                break\n        }\n        return ship\n    }\n\n    const receiveAttack = attackCoordinates => {\n        let target = grid[attackCoordinates.x][attackCoordinates.y]\n        if (target === ' ') {\n            grid[attackCoordinates.x][attackCoordinates.y] = '/'\n            return 'miss'\n        } else if (target === '/' || target === 'X') {\n            return 'duplicate'\n        } else {\n            ships.forEach(placement => {\n                if (placement.ship === target) {\n                    switch (placement.direction) {\n                        case 'right':\n                            target.hit(attackCoordinates.x - placement.coordinates.x)\n                            grid[attackCoordinates.x][attackCoordinates.y] = 'X'\n                            break\n                        case 'left':\n                            target.hit(placement.coordinates.x - attackCoordinates.x)\n                            grid[attackCoordinates.x][attackCoordinates.y] = 'X'\n                            break\n                        case 'up':\n                            target.hit(placement.coordinates.y - attackCoordinates.y)\n                            grid[attackCoordinates.x][attackCoordinates.y] = 'X'\n                            break\n                        case 'down':\n                            target.hit(attackCoordinates.y - placement.coordinates.y)\n                            grid[attackCoordinates.x][attackCoordinates.y] = 'X'\n                            break\n                        default:\n                            break\n                    }\n                }\n            })\n            return 'hit'\n        }\n    }\n\n    const remainingShips = () => {\n        let count = 0\n        ships.forEach(placement => {\n            if (!placement.ship.isSunk()) count++\n        })\n        return count\n    }\n\n    const getState = () => grid\n\n    return {addShip, receiveAttack, remainingShips, getState}\n}\n\nexport default GameBoardFactory\n","const PlayerFactory = (name, type) => {\n    let score = 0\n\n    const addPoint = () => score++\n    const getScore = () => score\n    const getName = () => name\n    const isBot = () => type === 'bot'\n\n    let names = name.toLowerCase().split(' ')\n    for (let i = 0; i < names.length; i++) {\n        let chars = names[i].split('')\n        chars[0] = chars[0].toUpperCase()\n        names[i] = chars.join('')\n    }\n    name = names.join(' ')\n\n    return {getName, addPoint, getScore, isBot}\n}\n\nexport default PlayerFactory\n","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport GameBoardFactory from './game'\nimport PlayerFactory from './player'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <Game />\n    </div>\n  )\n}\n\nclass Game extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      playerIsNext: false,\n      playerPlacedShips: 0\n    }\n\n    this.players = []\n    let name\n    do {name = prompt('Enter player name')} while (!name)\n    this.players.push({player: PlayerFactory(name, 'user'), gameboard: GameBoardFactory()})\n    this.players.push({player: PlayerFactory('b@tt13 b0t', 'bot'), gameboard: GameBoardFactory()})\n\n    this.fleet = [5, 4, 3, 2, 2, 1, 1]\n\n    for (let i = 0; i < this.fleet.length; i++) {\n      while(!this.placeRandomShip(1, this.fleet[i])) {}\n    }\n    \n    for (let i = 0; i < this.players[0].gameboard.getState().length; i++) {\n      console.log(this.players[0].gameboard.getState()[i].length)\n    }\n  }\n\n  handleClick (x, y) {\n    if (this.state.playerPlacedShips < 7) {\n      alert('Place all ships to start game.')\n      return\n    }\n\n    if (this.players[1].gameboard.receiveAttack({x, y}) !== 'duplicate') {\n      this.setState({playerIsNext: !this.state.playerIsNext})\n    if (!this.players[1].gameboard.remainingShips()) {\n      alert(`${this.players[0].player.getName()} wins!`)\n      window.location.reload()\n    }\n    while (this.players[0].gameboard.receiveAttack({x: this.getRandomInt(10), y: this.getRandomInt(10)}) === 'duplicate') {}\n    if (!this.players[0].gameboard.remainingShips()) {\n      alert(`${this.players[1].player.getName()} wins!`)\n      window.location.reload()\n    }\n    this.setState({playerIsNext: !this.state.playerIsNext})\n    }\n  }\n\n  getRandomInt (max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  placeRandomShip (player, length) {\n    let x = this.getRandomInt(10)\n    let y = this.getRandomInt(10)\n    let directions = ['up', 'down', 'right', 'left']\n    return typeof(this.players[player].gameboard.addShip(length, {x, y}, directions[this.getRandomInt(4)])) === 'object'\n  }\n\n  handleDrop (e) {\n    e.preventDefault()\n    let data = JSON.parse(e.dataTransfer.getData('text'))\n    let coordinates = JSON.parse(e.target.id)\n    let length = data.length\n    let id = data.id\n    let direction\n    data.className === 'hShip' ? direction = 'right' : direction = 'down'\n\n    if (typeof(this.players[0].gameboard.addShip(length, coordinates, direction)) === 'object') {\n      this.setState({playerPlacedShips: this.state.playerPlacedShips + 1})\n      document.getElementById(id).style.display = 'none'\n    }\n  }\n\n  render () {\n    let enemyGrid = []\n    for (let x = 0; x < this.players[1].gameboard.getState().length; x++) {\n      for (let y = 0; y < this.players[1].gameboard.getState()[x].length; y++) {\n        enemyGrid.push(<EnemySquare\n          value={this.players[1].gameboard.getState()[x][y]}\n          onClick={() => this.handleClick(x, y)}\n        />)\n      }\n    }\n\n    let playerGrid = []\n    for (let x = 0; x < this.players[0].gameboard.getState().length; x++) {\n      for (let y = 0; y < this.players[0].gameboard.getState()[x].length; y++) {\n        playerGrid.push(<PlayerSquare\n          value={this.players[0].gameboard.getState()[x][y]}\n          onDrop={(e) => this.handleDrop(e)}\n          id={JSON.stringify({x, y})}\n        />)\n      }\n    }\n\n    return (\n      <div id='container'>\n        <div className='gameboard' id='player'>\n          <h2>Your Ships</h2>\n          <div className='grid'>\n            {playerGrid}\n          </div>\n          <h4>Remaining Ships: {this.players[0].gameboard.remainingShips()}</h4>\n        </div>\n        <div className='gameboard' id='enemy'>\n          <h2>Enemy Ships</h2>\n          <div className='grid'>\n            {enemyGrid}\n          </div>\n          <h4>Remaining Ships: {this.players[1].gameboard.remainingShips()}</h4>\n        </div>\n        <div id='ships'>\n          <table>\n            <thead>\n              <tr>\n                <th>Aircraft Carrier</th>\n                <th>Battleship</th>\n                <th>Cruiser</th>\n                <th>Destroyer</th>\n                <th>Submarine</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <Ship value='carrier' id='carrier1'/>\n                </td>\n                <td>\n                  <Ship value='battleship' id='battleship1'/>\n                </td>\n                <td>\n                  <Ship value='cruiser' id='cruiser1' />\n                </td>\n                <td>\n                  <Ship value='destroyer' id='destroyer1' />\n                  <Ship value='destroyer' id='destroyer2' />\n                </td>\n                <td>\n                  <Ship value='submarine' id='submarine1' />\n                  <Ship value='submarine' id='submarine2' />\n                </td>\n              </tr>\n              \n            </tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction EnemySquare (props) {\n  return (\n    <button className='gridButton' onClick={() => props.onClick()}>\n      {typeof(props.value) === 'object' ? ' ' : props.value}\n    </button>\n  )\n}\n\nfunction PlayerSquare (props) {\n  return (\n    <div className={typeof(props.value) === 'object' ? 'occupiedGridSquare' : 'emptyGridSquare'} onDragOver={(e) => {e.preventDefault()}} onDrop={(e) => props.onDrop(e)} id={props.id}>\n      {typeof(props.value) === 'object' ? ' ' : props.value}\n    </div>\n  )\n}\n\nclass Ship extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {shipIsHorizontal: true}\n\n    this.squares = []\n    this.length = null\n    switch(props.value) {\n      case 'carrier':\n        this.length = 5\n        break\n      case 'battleship':\n        this.length = 4\n        break\n      case 'cruiser':\n        this.length = 3\n        break\n      case 'destroyer':\n        this.length = 2\n        break\n      case 'submarine':\n        this.length = 1\n        break\n      default:\n        this.length = 0\n        break\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      this.squares.push(<div className='occupiedGridSquare'></div>)\n    }\n  }\n\n  handleClick () {\n    this.setState({shipIsHorizontal: !this.state.shipIsHorizontal})\n  }\n\n  handleDrag (e) {\n    let data = JSON.stringify({\n      className: e.target.className,\n      length: this.length,\n      id: this.props.id\n    })\n    e.dataTransfer.setData('text', data)\n  }\n\n  render () {\n    return (\n      <div className={this.state.shipIsHorizontal ? 'hShip' : 'vShip'} onClick={() => this.handleClick()} length={this.length} draggable='true' onDragStart={(e) => this.handleDrag(e)} id={this.props.id}>\n        {this.squares}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/*ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);*/\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}